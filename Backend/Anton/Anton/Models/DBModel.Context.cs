//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Anton.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CoTecDBEntities : DbContext
    {
        public CoTecDBEntities()
            : base("name=CoTecDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contacted_Person> Contacted_Person { get; set; }
        public virtual DbSet<Continents> Continents { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<CountryLocations> CountryLocations { get; set; }
        public virtual DbSet<EnforcedMeasurements> EnforcedMeasurements { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<Hospital_ICUs> Hospital_ICUs { get; set; }
        public virtual DbSet<Hospital_Medications> Hospital_Medications { get; set; }
        public virtual DbSet<Hospital_Patients> Hospital_Patients { get; set; }
        public virtual DbSet<Hospitals> Hospitals { get; set; }
        public virtual DbSet<Medications> Medications { get; set; }
        public virtual DbSet<Pathologies> Pathologies { get; set; }
        public virtual DbSet<Patient_Medications> Patient_Medications { get; set; }
        public virtual DbSet<Patient_Pathologies> Patient_Pathologies { get; set; }
        public virtual DbSet<Patient_Status> Patient_Status { get; set; }
        public virtual DbSet<Patients> Patients { get; set; }
        public virtual DbSet<SanityMeasurements> SanityMeasurements { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual ObjectResult<getEnforcedMeasurementsProcedure_Result> getEnforcedMeasurementsProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEnforcedMeasurementsProcedure_Result>("getEnforcedMeasurementsProcedure");
        }
    
        public virtual ObjectResult<getHospitalsProcedure_Result> getHospitalsProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHospitalsProcedure_Result>("getHospitalsProcedure");
        }
    
        public virtual ObjectResult<getMedicationProcedure_Result> getMedicationProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMedicationProcedure_Result>("getMedicationProcedure");
        }
    
        public virtual ObjectResult<getPacientsProcedure_Result> getPacientsProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPacientsProcedure_Result>("getPacientsProcedure");
        }
    
        public virtual ObjectResult<string> getPacientStatusProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getPacientStatusProcedure");
        }
    
        public virtual ObjectResult<getPathologiesProcedure_Result> getPathologiesProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPathologiesProcedure_Result>("getPathologiesProcedure");
        }
    
        public virtual ObjectResult<getRegionsProcedure_Result> getRegionsProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRegionsProcedure_Result>("getRegionsProcedure");
        }
    
        public virtual ObjectResult<getSanitaryMeasurementsProcedure_Result> getSanitaryMeasurementsProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSanitaryMeasurementsProcedure_Result>("getSanitaryMeasurementsProcedure");
        }
    
        public virtual ObjectResult<getContactedPersonProcedure_Result> getContactedPersonProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getContactedPersonProcedure_Result>("getContactedPersonProcedure");
        }
    
        public virtual ObjectResult<string> getCountriesProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getCountriesProcedure");
        }
    
        public virtual ObjectResult<getCountryAccumulatedProcedure_Result> getCountryAccumulatedProcedure(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCountryAccumulatedProcedure_Result>("getCountryAccumulatedProcedure", countryParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<getCountryMeasurementsProcedure_Result> getCountryMeasurementsProcedure(string country, string date)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCountryMeasurementsProcedure_Result>("getCountryMeasurementsProcedure", countryParameter, dateParameter);
        }
    
        public virtual ObjectResult<getLastWeekAccumulated_Result> getLastWeekAccumulated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLastWeekAccumulated_Result>("getLastWeekAccumulated");
        }
    
        public virtual ObjectResult<getLastWeekCountryAccumulated_Result> getLastWeekCountryAccumulated(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLastWeekCountryAccumulated_Result>("getLastWeekCountryAccumulated", countryParameter);
        }
    
        public virtual ObjectResult<getTotalAccumulated_Result> getTotalAccumulated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTotalAccumulated_Result>("getTotalAccumulated");
        }
    }
}
